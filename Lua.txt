lua :月亮，嵌入式脚本语言。
1、Lua异常处理机制：
   非保护模式： 全部给Lua自身的PANIC函数处理
   保护模式：可以人为的抛出来，让外层的程序显示Catch到。
2、Lua 索引方式：
   正数索引：栈底是1，从下往上递增
   负数索引：栈顶是-1，从上往下递减
3、Lua_gettop: 返回栈顶元素的索引。一般是正数索引，所以结果等于堆栈上的元素个数。
4、Lua_getglobal: 将全局变量name里的值压入堆栈。
5、Lua_atpanic:设置自定义panic函数。
6、Lua_pushcclosur:像栈中压入一个C闭包。
7、Lua_register:
8、Luajit:采用C语言写的Lua的解释器的代码，针对Lua语言的一个JIT编译器。
9、Lua标准库：
10、LuaBind: 
11、Table是一个关联数组，这个数组不仅仅以数字做索引，除了nil和Nan之外的所有Lua值都可以做索引。表内不存在的键，都对应着值nil
12、userdata: 类型允许将C中的数据保存在Lua变量中，用户数据类型的值是一个内存块，用两种数据类型：完全用户数据，轻量用户数据。
13、Lua中，一个全局变量未被赋值前默认值为nil。







tolua 

tolua如何工作：创建一个package文件(头文件),列举出想导出到lua环境中的常量、变量、函数、类以及方法。然后tolua会解析该文件并且创建自动绑定C/C++代码到lua的C/C++文件。
tolua如何使用：由两部分代码组成，可执行程序和静态库。可执行程序用于解析，读入package文件，输出C/C++代码。该代码提供了从lua层访问C/C++层的绑定。

1、tolua自动映射C/C++基本类型到lua的基本类型。
   char、int、float和double类型被映射为lua的number。
   char*被映射为lua中的string。
   void*被映射为lua中的userdata。
   package文件里的所有其他类型都会被认为是用户自定义类型，映射到userdata类型。
2、两种绑定常量的方式：define和enum。
   #define NAME [VALUE]
3、绑定外部变量
      
   

C Lua  Luajit ulua tolua
