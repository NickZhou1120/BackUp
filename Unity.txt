1、[Head("xx")], 在检视面板中将字段进行分组。
3、EditorWindow: 创建编辑器窗口类   Editor：UNITY编辑器扩展类  EditorGUI：编辑器窗口布局类   EditorGUILayout：自动编辑器窗口布局类
7、OnInspectorGUI(),重新绘制Inspector布局
8、大部分Unity API应只在主线程中调用，不能再构造函数或者字段初始化方法中调用Api,也不能再反序列化过程中调用Api.
9、Unity3d 5.x AssetBundle打包
10、预计算实时全局光照明（Enlight）
11、LigghtMapping（光照贴图）: 从maya,3Dmax导入fbx模型，设置参数。
12、Light Probes（灯光探测器）:
    原理是在场景中的标记为探测器的静态点的位置采样光照，然后对相邻的几个光照探测器位置所采样的灯光照明进行差值。
13、IK动画：反向动力学，就是子骨骼节点带动父骨骼节点运动。 控制IK的脚本必须添加到OnAnimatorIK方法中才会生效。
14、Mecanim动画系统：因为骨骼结构的类似性，使得动画从一个类人骨架映射到另外一个类人骨架成为可能。
15、Avatar: unity 导入模型时（.fbx,collada),选择Humanoid,然后apply，会生成Avatar文件。
16、GI : unity 5.0采用了Enlighten,实时的全局光。
17、RenderTexture: 在运行时创建和更新，需要指定摄像机渲染。
18、ScriptableObject: 
    1、创建不需要附加到游戏物体的对象，一般用来存储u3d无法打包的对象，利用它可以将对象打包为asstbundle或者.asset文件。
	2、存储数据。
19、Unity将Assets目录中的语言分开编译，plugins子目录之外的C#脚本编译到Assembly-CSharp.dll,而Plugins及其子目录中的脚本放置在Assembly-CSharp-firstpass.dll中。
20、Canvas画布：Screen Space-Overlay 始终显示在屏幕最前方  Screen Space-Camera :绑定到指定摄像机。
21、帧动画原理：将每帧所需要的所有顶点(顶点位置、法线、纹理坐标)等信息全部存储下来，在渲染的时候逐帧播放或差值播放。
    骨骼动画：
	骨头：每块骨头分别与若干数量的蒙皮顶点关联。
    骨骼：用以控制蒙皮的一种抽象的概念,是若干骨头成树状的集合。
    蒙皮：被骨骼控制，并显示在外的因素，其实就是顶点、法线和纹理坐标。
22、Spine: 美术通过spine编辑器导出三个文件：
           Unity新建prefab,add  spine组件选择spine资源使用。
23、AddComponentMenu ：用来更好的组织组件菜单。
24、SerializeField ：强制Unity去序列化一个私有域。
25、Application.dataPath: Contains the path to the game data folder。
26、Sprite:基于Texture2D得到的图像，此类通过游戏对象上面的SpriteRenderer组件应用并实际显示该图像。
27、SpriteRenderer: 渲染一个精灵，用于2D图像。
28、Animator 的Apply Root Motion,勾选后角色的transform不能通过脚本直接赋值，而是通过动画的运动来改变。
29、[RequireComponent (typeof(componet))]:需要的组件将会被添加到Gameobject上。
30、[SerializeField] 强制Unity去序列化一个私有域。
31、Unity 获取mono版本：反射。
32、Mesh Filter:take a mesh from your assets and passes it to the mesh renderer。               
33、Mesh Renderer:take the geometry from the mesh filter。
34、Cast Shadows：产生阴影。
35、ACGN: Animation 
          Comic(漫画)
          Game
          Novel(小说)
36、Unity使用的内存分为三种，优化方法：
    1、程序代码：包括Unity引擎库，游戏代码，编译后在设备中运行，并占用一定内存。
	   优化方法：1、减少打包时的引用库。
	             2、优化build设置(.net 库)
    2、托管堆：Mono使用的内存，用来存放类的实例(new生成的列表，实例中各种声明的变量)，定时的使用垃圾回收。
	   优化方法：托管堆中存储的是代码中申请的内存，一般就是new或者Instantiate两种方法，在接收到alloc请求后，托管堆新生成对象实例、分配内存。
	             尽可能早的时间除掉引用，这样GC才能正确的把不需要的内存清理出来。
    3、本机堆栈：Unity引擎进行申请和操作的地方，比如贴图，音效，关卡数据等,Unity使用了自己的一套内存管理机制。
	   基本理念是(需要时加载，没有引用时卸载)。
37、Goolge VR:
38、Office Open XML: Office 2007产品开发的技术规范，现已成为国际文档格式标准。
39、AssetDatabase: 编辑器类,An Interface for accessing assets and performing operations on assets。
40、webp格式：有损压缩图片格式，Google开发的一种旨在加快图片加载速度的图片格式，压缩体积只有JPEG的2/3。
41、EditorUtility：编辑器类，调用系统API操作文件夹或者文件。
42、Awake:生命周期中只执行一次，在场景中所有对象初始化之后执行。
43、Application.targetFrameRate：命令游戏尝试以一个特定的帧率渲染，不保证帧率，会因不同平台而波动。
44、QualitySettings.antiAliasing：抗锯齿
45、QualitySettings.vSyncCount:垂直同步数。
46、Event System:
47、Standalone Input Module：电脑控制组.
48、Touch Input Module：触摸输入组。
49、Graphic Raycaster：图像射线检测。
50、MenuItem(string itemname,bool isvalidFcuntion,int priotiry):isvalidFcuntion 是否验证函数。
51、Unity编译如只armv7，plugin下面lib库也应该只支持armv7。
52、Unity 版本构建之路：
    1、手工时代
	2、工业时代
	3、自动化时代
	4、自动化时代2.0
53、Texture.anisoLevel:贴图的各向异性过滤等级，值范围1-9,1等于没有过滤9等于完全过滤。
54、Texture Type；Unity 纹理类型。
55、Pixels Per Unit：意思在Sprite中，世界坐标系中的一单元有几个像素组成
56、帧数：帧生成数量的简称
    帧：静止的图像
57、TexturePacker:	
58、Cast Shadows：投射阴影。
59、3D模型动画基本原理：模型中的各顶点的位置随时间变化。
    1、Morph动画：
	2、关节动画:关节动画的模型不是一个整体的Mesh，而是分成很多部分(Mesh)，通过一个父子层次结构将这些分散的Mesh组织在一起。
	3、骨骼蒙皮动画:骨骼 + 蒙皮
60、旋转:
    1、矩阵旋转：使用4*4的 矩阵表示绕任意轴旋转时的变换矩阵。
	   优点：旋转轴可以是任何向量
	   缺点：旋转变换矩阵使用了4*4=16元素，增加算法运算量。
    2、欧拉旋转：在旋转时，按照一定的顺序每个轴旋转一定角度。
    万向节锁原因：因为欧拉旋转时按顺序旋转坐标轴的，当旋转中某些坐标重合就会发生万向节锁，失去一个方向上的选择能力。
	3、四元数本质上是一种高阶复数，是一个四维空间。实数加上三个元素i、j、k组成，有如下关系：i2=j2=k2=ijk=-1
	   绕单位向量(x,y,z)表示的轴旋转θ,旋转公式：q=((x,y,z)sinθ2,cosθ2)
	   优点:避免万向节锁，可绕任意过原点的向量旋转，可提供球面平滑插值
	   缺点：比欧拉角复杂，多了一个维度。
61、EditorUtility.SetDirty：标记目标物体已改变。MonoBehaviour或ScriptableObject不自动做这个，因此如果你想值被保存，必须调用SetDirty
62、位
    字节：8个二进制位构成1个字节(Bytes)
    KB: 1024个字节	
63、Draw Call: Unity生成一帧画面的处理过程，引擎经过可见性测试，确定摄像机可以看到的物体，然后把这些物体的顶点(顶点位置、法线、UV等)、索引、变换(旋转、缩放以及摄像机的位置)相关光源、纹理、渲染方式等数据准备好，然后通知图像API开始绘制。
               Unity中每次引擎准备数据并通知GPU的过程称为一次Draw Call。
64、Batched:其实是Drall Call的另外一种称呼。每一次Drall Call是CPU把一个Batched里的数据传输给GPU，由GPU绘制到屏幕上。因此Batched越多需要传输的数据越多，产生的Draw Call也会越多。
65、UGUI Best fit:动态调整字体大小适应UI布局，代价是会把文字生成图元保存到atlas，增加额外生成时间，使字体对应的atlas变大。			   
                
	   
	   
	   
	   
UGUI:
2、Canvas Scaler	   